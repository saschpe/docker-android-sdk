#!/bin/bash
#
# Script to build container image. Needs root privileges or 'docker' group
# membership when using Docker. Prefer using Podman on Linux instead.

SCRIPT_DIR=$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )
. "${SCRIPT_DIR}/../inc.constants"
. "${SCRIPT_DIR}/../inc.functions"


# Default values
DEFAULT_ANDROID_API=$(grep android_api= "${SCRIPT_DIR}/../../Dockerfile" | cut -d"=" -f2)
DEFAULT_JDK=$(grep jdk= "${SCRIPT_DIR}/../../Dockerfile" | cut -d"=" -f2)
DEFAULT_PLATFORMS="linux/amd64,linux/arm64"


# Functions
function usage {
  echo -e "Usage: ${0} [OPTIONS]"
  echo -e "Options:"
  echo -e "  --android-api API_LEVEL\t(default: ${DEFAULT_ANDROID_API})"
  echo -e "  --jdk VERSION\t\t\t(default: ${DEFAULT_JDK})"
  echo -e "  --docker-platforms\t\t(default: ${DEFAULT_PLATFORMS})"
  echo -e "  --docker-push\t\t\t(optional)"
  exit 1
}


# Command-line arguments
android_api="${DEFAULT_ANDROID_API}"
jdk="${DEFAULT_JDK}"
docker_push=
docker_platforms="${DEFAULT_PLATFORMS}"
while [[ $# -gt 0 ]] ; do
  key="$1"
  case $key in
  --android-api)
    android_api="$2"
    shift # past argument
    ;;
  --jdk)
    jdk="$2"
    shift # past argument
    ;;
  --docker-platforms)
    docker_platforms="$2"
    shift # past argument
    ;;
  --docker-push)
    docker_push=true
    ;;
  -h|--help)
    usage
    shift # past argument
    ;;
  *) # unknown option
    ;;
  esac
  shift # past argument or value
done


# Let's roll
image_tag="${android_api}-jdk${jdk}"

if [ ${docker_push} ] ; then
  buildx_command="--push"
fi

safe docker buildx ls | grep -q main || safe docker buildx create --name main

approve "Building image ${DOCKER_IMAGE}:${image_tag}"
safe docker buildx build --platform ${docker_platforms} \
  ${buildx_command} \
  --builder main \
  --build-arg android_api=${android_api} \
  --build-arg jdk=${jdk} \
  --tag ${DOCKER_IMAGE}:${image_tag} .
